syntax = "proto3";

option go_package = "github.com/redhatinsights/yggdrasil/protocol";

package yggdrasil;

service Dispatcher {
    // Register is called by a worker to indicate it is ready and capable of
    // handling the specified type of work.
    rpc Register (RegistrationRequest) returns (RegistrationResponse) {}

    // Send is called by a worker to send data to the dispatcher.
    rpc Send (Data) returns (Response) {}

    // GetConfig can be called by a worker to get the current configuration
    // state of the dispatcher service.
    rpc GetConfig (Empty) returns (Config) {}
}

service Worker {
    // Send is called by the dispatcher to send data to a worker.
    rpc Send (Data) returns (Response) {}

    // NotifyEvent is called by the dispatcher to send event information to a worker.
    rpc NotifyEvent (EventNotification) returns (EventReceipt) {}
}

// An Empty message.
message Empty {}

// A RegistrationRequest message contains information necessary for a client to
// request registration with the dispatcher for a specified work type.
message RegistrationRequest {
    // The type of work the worker is capable of handling.
    string handler = 1;

    // The PID of the worker.
    int64 pid = 2;

    // Whether or not the worker requires detached content processing.
    bool detached_content = 3;

    // A set of features a worker can announce during registration.
    map<string, string> features = 4;
}

// A RegistrationResponse message contains the result of a registration request.
message RegistrationResponse {
    // Whether or not the dispatcher accepted the registration request.
    bool registered = 1;

    // The address on which the worker can be dialed to assign work.
    string address = 2;
}

// A Data message contains data and metadata suitable to exchange data between
// the dispatcher and a worker.
message Data {
    // The MQTT message ID that generated this message.
    string message_id = 1;

    // Optional key-value pairs to be included in the data message.
    map<string, string> metadata = 2;

    // The data payload.
    bytes content = 3;

    // The MQTT message ID this message is in response to.
    string response_to = 4;

    // The destination of the message.
    string directive = 5;
}

// A Receipt message is sent as a successful response to a Send method.
message Receipt {}

// An EventReceipt message is sent as a successful response to the NotifyEven method.
message EventReceipt {}

enum Event {
    // UNKNOWN is an undeclared event; protobuf requires the presence of a zero value. It shouldn't be used.
    UNKNOWN = 0;

    // RECEIVED_DISCONNECT is sent by the dispatcher to workers when the service received the "disconnect" command.
    RECEIVED_DISCONNECT = 1;

    // UNEXPECTED_DISCONNECT is sent by the dispatcher when the service unexpectedly disconnects from the network.
    UNEXPECTED_DISCONNECT = 2;

    // CONNECTION_RESTORED is sent by the dispatcher when the service re-connects to the network.
    CONNECTION_RESTORED = 3;
}

// An EventNotification message contains data and metadata describing event occurring in the dispatcher.
message EventNotification {
    // The name of an event.
    Event name = 1;
    // Details of the event.
    string detail = 2;
    // Optional key-value pairs.
    map<string, string> metadata = 3;
}

// A Config message contains current configuration state for the dispatcher.
message Config {
  // The level value used for logging.
  string log_level = 1;

  // A unique identification value for the client over connection transports.
  string client_id = 2;

  // The socket address on which yggd is listening.
  string socket_addr = 3;

  // A URI to which yggd connects in order to send and receive data.
  string server = 4;

  // A path to a public certificate, optionally used along with key_file to
  // authenticate connections.
  string cert_file = 5;

  // A path to a private certificate, optionally used along with cert_file to
  // authenticate connections.
  string key_file = 6;

  // A path to full chain certificate file to optionally include in the TLS
  // configration's CA root list.
  string ca_root = 7;
}


// A API Response object with all information regarding a response
message Response {
  // Response given by the transport, for each transport can be different:
  // HTTP: JSON object with status_code, headers and body.
  // MQTT: empty bytes
  bytes response = 1;
}

