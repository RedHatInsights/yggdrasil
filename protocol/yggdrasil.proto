syntax = "proto3";

option go_package = "github.com/redhatinsights/yggdrasil/protocol";

package yggdrasil;

service Dispatcher {
    // Register is called by a worker to indicate it is ready and capable of
    // handling the specified type of work.
    rpc Register (RegisterRequest) returns (RegisterResponse) {}

    // Update can be called by a worker if it wants to submit some output,
    // but has not completed the assigned work.
    rpc Update (Assignment) returns (Empty) {}

    // Finish is called by a worker when it has completed its assigned work.
    rpc Finish (Assignment) returns (Empty) {}
}

service Worker {
    // Start is called by the manager to assign work to a worker.
    rpc Start (Assignment) returns (StartResponse) {}

    // Status is called by the manager to check whether or not a worker is busy.
    rpc Status (Empty) returns (WorkerStatus) {}
}

// An Empty message.
message Empty {}

// A RegisterRequest message contains information necessary for a client to
// register with the dispatcher for a specified work type.
message RegisterRequest {
    // The type of work the worker is capable of handling.
    string handler = 1;

    // The PID of the worker.
    int64 pid = 2;
}

// A RegisterResponse message contains the result of a registration request.
message RegisterResponse {
    // Whether the dispatcher accepted the registration request or not.
    bool registered = 1;

    // The address on which the worker can be dialed to assign work.
    string address = 2;

    // A message from the dispatch with more information about the request.
    string reason = 3;
}

// An Assignment message contains information about a work assignment. It's
// an envelope to tranport the data to the worker along with an ID for tracking
// responses.
message Assignment {
    // The assignment identifier.
    string id = 1;

    // The assignment payload.
    bytes data = 2;

    // Whether an assignment is completed or not.
    bool complete = 3;

    // The handler to which this assignment should get routed.
    string handler = 4;

    // Any headers to include in the return_url HTTP request.
    map<string, string> headers = 5;
}

// A StartResponse message contains the result of a work assignment request.
message StartResponse {
    // Whether the worker accepted the work assignment or not.
    bool accepted = 1;
}

// A WorkerStatus message contains the status of a worker.
message WorkerStatus {
    enum Status {
        READY = 0;
        BUSY  = 1;
    }
    Status status = 1;
}
