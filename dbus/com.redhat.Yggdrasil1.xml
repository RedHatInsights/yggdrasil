<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "https://specifications.freedesktop.org/dbus/introspect-latest.dtd">
<node>
    <!-- 
        com.redhat.Yggdrasil1:
        @short_description: Yggdrasil object interface

        The Yggdrasil1 interface exposes methods and signals enabling
        programmatic interaction with the yggdrasil system service.
    -->
    <interface name="com.redhat.Yggdrasil1">
        <!-- 
            Dispatch:
            @directive: worker identifier for which the data is destined.
            @id: Unique ID of the message.
            @metadata: Optional key-value pairs included in the message.
            @data: The message content

            Sends data to the worker identified by the given directive.
        -->
        <method name="Dispatch">
            <arg type="s" name="directive" direction="in" />
            <arg type="s" name="id" direction="in" />
            <arg type="a{ss}" name="metadata" direction="in" />
            <arg type="ay" name="data" direction="in" />
        </method>

        <!--
            ListWorkers:
            @workers: The set of workers.

            Returns the set of workers currently known, along with their
            "features" table.
        -->
        <method name="ListWorkers">
            <arg type="a{sa{ss}}" name="workers" direction="out" />
        </method>

        <!--
            MessageJournal:
            @message_id: Filter journal entries to only contain entries with this message id value.
            @worker: Filter journal entries to only contain entries with this worker name.
            @since: Filter journal entries to only contain entries from this date time value.
            @until: Filter journal entries to only contain entries up to this date time value.
            @persistent: Filter journal entries to only contain entries from the persistent collection of
            journal entries spanning multiple sessions. By default, journal entries are collected from
            the active session.
            @truncate_fields: Truncates the worker events data fields by the provided character count.
            This field is an array with key/value pairs where the key is the name of the data field and
            the value is the maximum length of the fields content separated by the '=' character.
            @truncate_all_fields: Truncates all worker event data fields to the provided character count.

            @messages: Array of dictionary objects matching the input filter parameters.
            Each element in the array is a dictionary with key/value pairs as follows:
            "message_id":     <string value>,
            "sent":           <string value>,
            "worker_name":    <string value>,
            "response_to":    <string value>,
            "worker_event":   <string value>,
            "worker_message": <string value>,

            Returns the set of worker messages dispatched to workers and
            events emitted by workers.
        -->
        <method name="MessageJournal">
            <arg type="s" name="message_id" direction="in" />
            <arg type="s" name="worker" direction="in" />
            <arg type="s" name="since" direction="in" />
            <arg type="s" name="until" direction="in" />
            <arg type="b" name="persistent" direction="in" />
            <arg type="as" name="truncate_fields", direction="in" />
            <arg type="u" name="truncate_all_fields", direction="in" />
            <arg type="aa{ss}" name="messages" direction="out" />
        </method>

        <!-- 
            WorkerEvent:
            @worker: Name of the worker emitting the event.
            @name: Name of the event.
            @message_id: The id associated with the worker message.
            @response_to: Unique ID of the message this message is in reply to.
            @data: Key-value pairs of optional data provided with the event.

            Emitted by a worker when certain conditions arise, such as beginning
            or ending work.

            The possible values for the 'name' argument are:

            1 = BEGIN
            Emitted when the worker "accepts" a dispatched message and begins
            "working".
            
            2 = END
            Emitted when the worker finishes "working".

            3 = WORKING
            Emitted when the worker wishes to continue to announce it is
            working.
        -->
        <signal name="WorkerEvent">
            <arg type="s" name="worker" />
            <arg type="u" name="name" />
            <arg type="s" name="message_id" />
            <arg type="s" name="response_to" />
            <arg type="a{ss}" name="data" />
        </signal>
    </interface>
</node>
